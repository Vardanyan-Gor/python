# Lab 5.1
# Базовый класс Shape
class Shape:
    def __init__(self, name):
        self.name = name

# Миксин для 2D
class AreaMixin:
    def area(self):
        raise NotImplementedError("Метод area должен быть переопределен")

# Миксин для 3D
class VolumeMixin:
    def volume(self):
        raise NotImplementedError("Метод volume должен быть переопределен")

# 2D класс
class TwoD(Shape, AreaMixin):
    def __init__(self, name):
        super().__init__(name)

# 3D класс
class ThreeD(Shape, VolumeMixin):
    def __init__(self, name):
        super().__init__(name)

# Класс Square, наследующий от 2D
class Square(TwoD):
    def __init__(self, side):
        super().__init__('Square')
        self.side = side

    def area(self):
        return self.side * self.side

# Класс Triangle, наследующий от 2D
class Triangle(TwoD):
    def __init__(self, base, height):
        super().__init__('Triangle')
        self.base = base
        self.height = height

    def area(self):
        return (self.base * self.height) / 2

# Класс Cube, наследующий от 3D
class Cube(ThreeD):
    def __init__(self, side):
        super().__init__('Cube')
        self.side = side

    def volume(self):
        return self.side ** 3

# Класс Cone, наследующий от 3D
class Cone(ThreeD):
    def __init__(self, radius, height):
        super().__init__('Cone')
        self.radius = radius
        self.height = height

    def volume(self):
        return (1 / 3) * 3.141592653589793 * (self.radius ** 2) * self.height

# Пример использования:

square = Square(5)
print(f"{square.name} area: {square.area()}")  # Square area: 25

triangle = Triangle(5, 10)
print(f"{triangle.name} area: {triangle.area()}")  # Triangle area: 25

cube = Cube(3)
print(f"{cube.name} volume: {cube.volume()}")  # Cube volume: 27

cone = Cone(3, 4)
print(f"{cone.name} volume: {cone.volume()}")  # Cone volume: 37.69911184307752
